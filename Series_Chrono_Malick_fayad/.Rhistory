runifdisque = function(N)
{
R = sqrt(runif(N))
Theta = 2*pi*runif(N)
return(cbind(R*cos(Theta),R*sin(Theta)))
}
v = runifdisque(100)
plot(v[,1],v[,2],'p')
w=seq(0,2*pi,by=0.01)
lines(cos(w),sin(w),col ='2')
###########TP3 "Simulation de variables aléatoires(suites)################
################ Exercice 1 ###################
## Question 1
u1 = runif(1)
u2 = runif(1)
x = sqrt(u1)*cos(2*pi*u2)
y = sqrt(u1)*sin(2*pi*u2)
runifdisque = function(N)
{
R = sqrt(runif(N))
Theta = 2*pi*runif(N)
return(cbind(R*cos(Theta),R*sin(Theta)))
}
v = runifdisque(100)
plot(v[,1],v[,2],'p')
w=seq(0,2*pi,by=0.01)
lines(cos(w),sin(w),col ='2')
###########TP3 "Simulation de variables aléatoires(suites)################
################ Exercice 1 ###################
## Question 1
u1 = runif(1)
u2 = runif(1)
x = sqrt(u1)*cos(2*pi*u2)
y = sqrt(u1)*sin(2*pi*u2)
runifdisque = function(N)
{
R = sqrt(runif(N))
Theta = 2*pi*runif(N)
return(cbind(R*cos(Theta),R*sin(Theta)))
}
v = runifdisque(100)
plot(v[,1],v[,2],'p')
w=seq(0,2*pi,by=0.01)
lines(cos(w),sin(w),col ='2')
###########TP3 "Simulation de variables aléatoires(suites)################
################ Exercice 1 ###################
## Question 1
u1 = runif(1)
u2 = runif(1)
x = sqrt(u1)*cos(2*pi*u2)
y = sqrt(u1)*sin(2*pi*u2)
runifdisque = function(N)
{
R = sqrt(runif(N))
Theta = 2*pi*runif(N)
return(cbind(R*cos(Theta),R*sin(Theta)))
}
v = runifdisque(100)
plot(v[,1],v[,2],'0')
w=seq(0,2*pi,by=0.01)
lines(cos(w),sin(w),col ='2')
###########TP3 "Simulation de variables aléatoires(suites)################
################ Exercice 1 ###################
## Question 1
u1 = runif(1)
u2 = runif(1)
x = sqrt(u1)*cos(2*pi*u2)
y = sqrt(u1)*sin(2*pi*u2)
runifdisque = function(N)
{
R = sqrt(runif(N))
Theta = 2*pi*runif(N)
return(cbind(R*cos(Theta),R*sin(Theta)))
}
v = runifdisque(100)
plot(v[,1],v[,2],'x')
w=seq(0,2*pi,by=0.01)
lines(cos(w),sin(w),col ='2')
###########TP3 "Simulation de variables aléatoires(suites)################
################ Exercice 1 ###################
## Question 1
u1 = runif(1)
u2 = runif(1)
x = sqrt(u1)*cos(2*pi*u2)
y = sqrt(u1)*sin(2*pi*u2)
runifdisque = function(N)
{
R = sqrt(runif(N))
Theta = 2*pi*runif(N)
return(cbind(R*cos(Theta),R*sin(Theta)))
}
v = runifdisque(100)
plot(v[,1],v[,2],'p')
w=seq(0,2*pi,by=0.01)
lines(cos(w),sin(w),col ='2')
source('~/Bureau/TP/Processus/TP1 Correction.R')
cbind(5)
cbind(4)
###########TP3 "Simulation de variables aléatoires(suites)################
################ Exercice 1 ###################
## Question 1
u1 = runif(1)
u2 = runif(1)
x = sqrt(u1)*cos(2*pi*u2)
y = sqrt(u1)*sin(2*pi*u2)
runifdisque = function(N)
{
R = sqrt(runif(N))
Theta = 2*pi*runif(N)
return(cbind(R*cos(Theta),R*sin(Theta)))
}
v = runifdisque(100)
plot(v[,1],v[,2],'p')
w=seq(0,2*pi,by=0.01)
lines(cos(w),sin(w),col ='2')
###########TP3 "Simulation de variables aléatoires(suites)################
################ Exercice 1 ###################
## Question 1
u1 = runif(1)
u2 = runif(1)
x = sqrt(u1)*cos(2*pi*u2)
y = sqrt(u1)*sin(2*pi*u2)
runifdisque = function(N)
{
R = sqrt(runif(N))
Theta = 2*pi*runif(N)
return(cbind(R*cos(Theta),R*sin(Theta)))
}
v = runifdisque(100)
plot(v[,1],v[,2],'p')
w=seq(0,2*pi,by=0.01)
lines(cos(w),sin(w),col ='2')
simuellipse = function(N)
{
compt = compt + 1
y = runifdisque(1)
u = runif(1)
y1 = y[1]; y2 = y[2]
test = ((y1^2+2*y2^2)>1)*((2*y1^2+y2^2)>1)
while(test ==1)
{
y = runifdisque(1)
u = runif(1)
y1 = y[1]; y2 = y[2]
test = ((y1^2+2*y2^2)>1)*((2*y1^2+y2^2)>1)
}
x1[i]=y1;x2[i]=y2
v=cbind(x1,x2)
}
return (list(v=v,compt=compt))
z=simuellipse(1000)
lines(z$v[,1],z$v[,2],'p',col='3')
dim(v)
v=cbind(x1,x2)
install.packages("corrplot")
install.packages("factoextra")
install.packages("FactoMineR")
library(corrplot)
data(decathlon)
?decathlon
??decathlon
?decathlon
?decathlon
library("FactoMineR", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.5")
data(decathlon)
data(decathlon)
data
detach("package:FactoMineR", unload=TRUE)
#examen des données
plot(data)
library("FactoMineR", lib.loc="~/R/x86_64-redhat-linux-gnu-library/3.5")
?decathlon
data
data=decathlon
?decathlon
data=decathlon
library(factoextra)
library(FactoMineR)
library(corrplot)
data(decathlon)
?decathlon
data=decathlon
data
rownames(data)=substr(rownames(data),1,4) #2 lettre par nom
data
#L'individu 41 sera arbitrairement considéré comme supplémentaire
# La variable Compétition est qualitative et mise en supplémentaire
# Les variables points et rank sont calculées à partir des variables
# observées, elles seront aussi en supplémentaires
#examen des données
plot(data)
summary(data)
round(cor(data[,1:10]),2)
library("corrplot")
corrplot(cor(data[,1:10]))
#ACP
acp=PCA(data,quali.sup=13,quanti.sup=c(11,12),ind.sup=41)
#Inertie globale
acp$eig
barplot(acp$eig[,1])
fviz_eig(acp, addlabels = TRUE, ylim = c(0, 60))
#Examen des variables
fviz_contrib(acp, choice = "var", axes = 1)
plot.PCA(acp,choix="ind")
plot.PCA(acp,choix="ind",select="cos2 0.6",unselect=0.5)
plot.PCA(acp,choix="ind",select="contrib 5")
plot.PCA(acp,choix="ind",habillage=13,)
dimdesc(acp)
estim_ncp(data[,1:10],scale=TRUE)
dimdesc(acp)
plotellipses(acp,keepvar=13,level=0.9,means=FALSE)
round(cor(data[,1:10]),2)
round(cor(data[,1:10]),2)
library("corrplot")
corrplot(cor(data[,1:10]))
#ACP
acp=PCA(data,quali.sup=13,quanti.sup=c(11,12),ind.sup=41)
#examen des données
plot(data)
#ACP
acp=PCA(data,quali.sup=13,quanti.sup=c(11,12),ind.sup=41)
names(acp)
#4.1Inertie globale
acp$eig
corrplot(cor(data[,1:10]))
barplot(acp$eig[,1])
fviz_eig(acp, addlabels = TRUE, ylim = c(0, 60))
#Examen des variables
plot.PCA(acp,choix="var")
#Examen des variables
plot(acp,choix="var")
fviz_contrib(acp, choice = "var", axes = 1)
#Examen des variables
plot(acp,choix="var")
#Examen des individus
plot(acp,choix="ind")
#Examen des individus
plot(acp,choix="ind",select = 'cos2 0.6')
#Examen des individus
plot(acp,choix="ind",select = 'cos2 0.5')
#Examen des individus
plot(acp,choix="ind",select = 'contrib 10')
#Examen des individus
plot(acp,choix="ind",select = 'contrib 2')
#ACP
acp=PCA(data,quali.sup=13,quanti.sup=c(11,12),ind.sup=41)
#Examen des individus
plot(acp,choix="ind",select = 'contrib 10')
fviz_contrib(acp, choice = "var", axes = 1)
fviz_contrib(acp, choice = "var", axes = 1) # les variables qui ont le plus de contribution
fviz_contrib(acp, choice = "var", axes = 2) # les variables qui ont le plus de contribution
fviz_contrib(acp, choice = "var", axes = 3) # les variables qui ont le plus de contribution
fviz_contrib(acp, choice = "var", axes = 4) # les variables qui ont le plus de contribution
plotellipses(acp,keepvar=13,level=0.9,means=FALSE)
plotellipses(acp,keepvar=13,level=0.9,means=FALSE)# visualiser les varibles qualitatifs
dimdesc(acp)
install.packages("explor")
library(factoextra)
library(FactoMineR)
library(corrplot)
library(explor)
data(decathlon)
?decathlon
data=decathlon
data
rownames(data)=substr(rownames(data),1,4) #2 lettre par nom
#examen des données
plot(data)
summary(data)
round(cor(data[,1:10]),2)
library("corrplot")
library(factoextra)
library(FactoMineR)
library(corrplot)
library(explor)
data(decathlon)
?decathlon
data=decathlon
data
rownames(data)=substr(rownames(data),1,4) #2 lettre par nom
data
#L'individu 41 sera arbitrairement considéré comme supplémentaire
# La variable Compétition est qualitative et mise en supplémentaire
# Les variables points et rank sont calculées à partir des variables
# observées, elles seront aussi en supplémentaires
#examen des données
plot(data)
plot(cars)
1-pf(5.4,2,6)
qf(0.95,2,6)
#1.1
T1 = data.frame(Y=c(6,7,8,8,9,13,10,14,15),A=rep(c('M1','M2','M3'),each=3))
#1.1
T1 = data.frame(Y=c(6,7,8,8,9,13,10,14,15),A=rep(c('M1','M2','M3'),each=3))
View(T1)
rm(Y);rm(A)
attach(T1)
T1
by(Y,A,mean)
X=matrix(c(1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1),ncol=3)
View(X)
B=matrix(solve(t(X)%*%X)%*%t(X)%*%Y,ncol=1);B
SCR=sum((Y-X%*%B)^2);SCR
s2=SCR/6;s2
SCM=sum((X%*%B- mean(Y))^2);SCM
F=SCM/2/(SCR/6);F
anova(lm(Y~A))
lm(Y~A,data=T1)
T1.lm = lm(Y~A,data=T1)
T1.lm = lm(Y~A,data=T1);T1.lm
# R estime le modéle d'une autre façon,il fixe le premier facteur comme témoin.
# Dans R, le premier traitement est considéré comme témoin (intercept) et les autres paramètres estiment la différence avec ce témoin
T1.lm = lm(Y~A,data=T1);T1.lm
k=0
a=1
X1=rnorm(30,15-k,a*3)
X2=rnorm(30,17,a*3)
X3=rnorm(30,20+k,a*3)
X=c(X1,X2,X3)
x=seq(min(X),max(X),0.1)
plot(x,0*x,ylim=c(0,0.2),pch='')
rug(X1,col=2)
rug(X2,col=3)
rug(X3,col=4)
curve(dnorm(x,mean(X1),sd(X1)),col=2,add=T)
curve(dnorm(x,mean(X2),sd(X2)),col=3,add=T)
curve(dnorm(x,mean(X3),sd(X3)),col=4,add=T)
segments(mean(X1),0,mean(X1),0.5,col=2)
segments(mean(X2),0,mean(X2),0.5,col=3)
segments(mean(X3),0,mean(X3),0.5,col=4)
segments(mean(X),0,mean(X),0.5,col=1)
cbind(X1,X2,X3)
Y=c(X1,X2,X3);F=factor(rep(c('A','B','C'),each=30))
title(main=c('F',anova(lm(Y~F))$"F value"[1]))
stripchart(data.frame(X1,X2,X3),col=c(2,3,4))
k=2
a=0.7
X1=rnorm(30,15-k,a*3)
X2=rnorm(30,17,a*3)
X3=rnorm(30,20+k,a*3)
X=c(X1,X2,X3)
x=seq(min(X),max(X),0.1)
plot(x,0*x,ylim=c(0,0.3),pch='')
rug(X1,col=2)
rug(X2,col=3)
rug(X3,col=4)
curve(dnorm(x,mean(X1),sd(X1)),col=2,add=T)
curve(dnorm(x,mean(X2),sd(X2)),col=3,add=T)
curve(dnorm(x,mean(X3),sd(X3)),col=4,add=T)
segments(mean(X1),0,mean(X1),0.2,col=2)
segments(mean(X2),0,mean(X2),0.2,col=3)
segments(mean(X3),0,mean(X3),0.2,col=4)
segments(mean(X),0,mean(X),0.2,col=1)
Y=c(X1,X2,X3);F=factor(rep(c('A','B','C'),each=30))
title(main=c('F',anova(lm(Y~F))$"F value"[1]))
stripchart(data.frame(X1,X2,X3),col=c(2,3,4))
k=-1
a=3
X1=rnorm(30,15-k,a*3)
X2=rnorm(30,17,a*3)
X3=rnorm(30,20+k,a*3)
X=c(X1,X2,X3)
x=seq(min(X),max(X),0.1)
plot(x,0*x,ylim=c(0,0.1),pch='')
rug(X1,col=2)
rug(X2,col=3)
rug(X3,col=4)
curve(dnorm(x,mean(X1),sd(X1)),col=2,add=T)
curve(dnorm(x,mean(X2),sd(X2)),col=3,add=T)
curve(dnorm(x,mean(X3),sd(X3)),col=4,add=T)
segments(mean(X1),0,mean(X1),0.5,col=2)
segments(mean(X2),0,mean(X2),0.5,col=3)
segments(mean(X3),0,mean(X3),0.5,col=4)
segments(mean(X),0,mean(X),0.5,col=1)
cbind(X1,X2,X3)
Y=c(X1,X2,X3);F=factor(rep(c('A','B','C'),each=30))
title(main=c('F',anova(lm(Y~F))$"F value"[1]))
stripchart(data.frame(X1,X2,X3),col=c(2,3,4))
rug(X1,col=2)
rug(X2,col=3)
rug(X3,col=4)
curve(dnorm(x,mean(X1),sd(X1)),col=2,add=T)
curve(dnorm(x,mean(X2),sd(X2)),col=3,add=T)
curve(dnorm(x,mean(X3),sd(X3)),col=4,add=T)
par(mfrow=c(1,2))
# cas 1
k=0
detach(T1)
k=0
a=1
X1=rnorm(30,15-k,a*3)
X2=rnorm(30,17,a*3)
X3=rnorm(30,20+k,a*3)
X=c(X1,X2,X3)
x=seq(min(X),max(X),0.1)
plot(x,0*x,ylim=c(0,0.2),pch='')
rug(X1,col=2)
rug(X2,col=3)
rug(X3,col=4)
curve(dnorm(x,mean(X1),sd(X1)),col=2,add=T)
curve(dnorm(x,mean(X2),sd(X2)),col=3,add=T)
curve(dnorm(x,mean(X3),sd(X3)),col=4,add=T)
segments(mean(X1),0,mean(X1),0.5,col=2)
segments(mean(X2),0,mean(X2),0.5,col=3)
segments(mean(X3),0,mean(X3),0.5,col=4)
segments(mean(X),0,mean(X),0.5,col=1)
cbind(X1,X2,X3)
Y=c(X1,X2,X3);F=factor(rep(c('A','B','C'),each=30))
title(main=c('F',anova(lm(Y~F))$"F value"[1]))
stripchart(data.frame(X1,X2,X3),col=c(2,3,4))
k=2
a=0.7
X1=rnorm(30,15-k,a*3)
X2=rnorm(30,17,a*3)
X3=rnorm(30,20+k,a*3)
X=c(X1,X2,X3)
x=seq(min(X),max(X),0.1)
plot(x,0*x,ylim=c(0,0.3),pch='')
rug(X1,col=2)
rug(X2,col=3)
rug(X3,col=4)
curve(dnorm(x,mean(X1),sd(X1)),col=2,add=T)
curve(dnorm(x,mean(X2),sd(X2)),col=3,add=T)
curve(dnorm(x,mean(X3),sd(X3)),col=4,add=T)
segments(mean(X1),0,mean(X1),0.2,col=2)
segments(mean(X2),0,mean(X2),0.2,col=3)
segments(mean(X3),0,mean(X3),0.2,col=4)
segments(mean(X),0,mean(X),0.2,col=1)
Y=c(X1,X2,X3);F=factor(rep(c('A','B','C'),each=30))
title(main=c('F',anova(lm(Y~F))$"F value"[1]))
stripchart(data.frame(X1,X2,X3),col=c(2,3,4))
k=-1
a=3
X1=rnorm(30,15-k,a*3)
X2=rnorm(30,17,a*3)
X3=rnorm(30,20+k,a*3)
X=c(X1,X2,X3)
x=seq(min(X),max(X),0.1)
plot(x,0*x,ylim=c(0,0.1),pch='')
rug(X1,col=2)
rug(X2,col=3)
rug(X3,col=4)
curve(dnorm(x,mean(X1),sd(X1)),col=2,add=T)
curve(dnorm(x,mean(X2),sd(X2)),col=3,add=T)
curve(dnorm(x,mean(X3),sd(X3)),col=4,add=T)
segments(mean(X1),0,mean(X1),0.5,col=2)
segments(mean(X2),0,mean(X2),0.5,col=3)
segments(mean(X3),0,mean(X3),0.5,col=4)
segments(mean(X),0,mean(X),0.5,col=1)
cbind(X1,X2,X3)
Y=c(X1,X2,X3);F=factor(rep(c('A','B','C'),each=30))
title(main=c('F',anova(lm(Y~F))$"F value"[1]))
stripchart(data.frame(X1,X2,X3),col=c(2,3,4))
rug(X2,col=3)
# 1.1
data(iris);Y=iris$Petal.Length;X=iris$Species;
par(mfrow=c(1,2))
stripchart(Y~X,col=2:4);boxplot(Y~X,col=2:4);by(Y,X,mean)
by(Y,X,mean)
mod=aov(Y~X)
res=mod$residuals;hist(res,prob=T);curve(dnorm(x,mean(res),sd(res)),add=T)
shapiro.test(res)
bartlett.test(res~X)
summary(mod)
anova(mod)
kruskal.test(Y~X)
anova(lm(Y~A))
T1 = data.frame(Y=c(6,7,8,8,9,13,10,14,15),A=rep(c('M1','M2','M3'),each=3))
rm(Y);rm(A)
attach(T1)
T1
by(Y,A,mean) #Moyenne par groupe
X=matrix(c(1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1),ncol=3)
B=matrix(solve(t(X)%*%X)%*%t(X)%*%Y,ncol=1);B
SCR=sum((Y-X%*%B)^2);SCR
s2=SCR/6;s2
SCM=sum((X%*%B- mean(Y))^2);SCM
F=SCM/2/(SCR/6);F
# R estime le modéle d'une autre façon,il fixe le premier facteur comme témoin.
# Dans R, le premier traitement est considéré comme témoin (intercept) et les autres paramètres estiment la différence avec ce témoin
T1.lm = lm(Y~A,data=T1);T1.lm
anova(lm(Y~A))
anova(T1.lm)
# 1.1
data(iris);Y=iris$Petal.Length;X=iris$Species;
View(iris)
par(mfrow=c(1,2))
stripchart(Y~X,col=2:4);boxplot(Y~X,col=2:4);by(Y,X,mean)
by(Y,X,mean)
mod=aov(Y~X)
res=mod$residuals;hist(res,prob=T);curve(dnorm(x,mean(res),sd(res)),add=T)
shapiro.test(res)
shapiro.test(res) # teste pour verifier si les résidus suivent une loi Normale
bartlett.test(res~X)
summary(mod)
anova(mod)
kruskal.test(Y~X)
bartlett.test(res~X)#
bartlett.test(res~X)# teste les differences de variance entre les trois groupes
setwd("~/Bureau/Projets_Malick_fayad/Series_Chrono_Malick_fayad")
Conso.Rdata
load("Conso.Rdata")
load(Conso.Rdata)
load"Conso.Rdata"
load "Conso.Rdata"
load("Conso.RData")
load("Temps.RData")
load("Conso.RData")
load("Temps.RData")
load("Temp.RData")
Conso = load("Conso.RData")
Temp = load("Temp.RData")
